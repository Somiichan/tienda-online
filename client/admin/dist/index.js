(()=>{var n={874:()=>{class n extends HTMLElement{constructor(){super(),this.shadow=this.attachShadow({mode:"open"}),this.data=[],this.currentPage=1,this.totalPages=null}static get observedAttributes(){return["url"]}async connectedCallback(){await this.loadData(),await this.render()}async attributeChangedCallback(n,e,t){await this.loadData(),await this.render()}loadData=async()=>{try{let n=await fetch("http://localhost:8080/api/tpv/productos/relations"),e=await n.json();this.data=e.rows,this.currentPage=e.meta.currentPage,this.totalPages=e.meta.pages,console.log("Data:",e)}catch(n){console.log("Error:",n)}};loadFirstPage=async()=>{this.currentPage=1,await this.loadData(),await this.render()};loadPrevPage=async()=>{this.currentPage>1&&(this.currentPage=Number(this.currentPage)-1,await this.loadData(),await this.render())};loadNextPage=async()=>{this.currentPage<this.totalPages&&(this.currentPage=Number(this.currentPage)+1,await this.loadData(),await this.render())};loadLastPage=async()=>{this.currentPage=this.totalPages,console.log("Current Page:",this.currentPage),await this.loadData(),await this.render()};render(){this.shadow.innerHTML='\n        <style>\n            li {\n                font-family: "Poppins", sans-serif;\n                margin-bottom: 2px;\n            }\n\n            ul {\n                list-style: none;\n                padding-left: 0;\n            }\n            \n            .table{\n                display: flex;\n                flex-direction: column;\n                justify-content: space-between;\n                gap: 1.5rem;\n            }\n            \n            .table-element{\n                background-color:hsl(216, 94%, 67%);\n                box-shadow: 2px 2px 4px rgba(0, 0, 0, 0.4);\n            }\n            \n            .table-buttons{\n                display: flex;\n                justify-content: flex-end;\n                background-color: hsl(204, 85%, 69%);\n            }\n            \n            .table-buttons svg{\n                width: 2.5rem;\n                fill: white;\n                cursor: pointer;\n            }\n\n            .table-buttons svg:hover{\n                transform: scale(110%);\n            }\n            \n            .table-info{\n                padding: 0 1rem;\n            }\n            \n            .table-info ul li{\n                color: white;\n                font-size: 1rem;\n            }\n\n            .page {\n                margin-top: 1rem;\n                display: flex;\n                justify-content: space-between;\n            }\n\n            .page button {\n                color: hsl(211, 12%, 48%);\n                background-color: white;\n                padding: 5px;\n                font-size: 1rem;\n                font-weight: 500;\n                font-family: "Poppins", sans-serif;\n                border: 1px solid hsl(204, 85%, 80%);\n                box-shadow: 2px 2px 4px rgba(0, 0, 0, 0.4);\n                cursor: pointer;\n            }\n            \n            .page button:hover {\n                color: hsl(208, 13%, 25%);\n            }\n            \n            .nextPageButton.inactive,\n            .prevPageButton.inactive,\n            .firstPageButton.inactive,\n            .lastPageButton.inactive {\n                opacity: 50%;\n                cursor: default;\n                pointer-events: none;\n            }\n            \n            .nextPageButton.inactive:hover,\n            .prevPageButton.inactive:hover,\n            .firstPageButton.inactive:hover,\n            .lastPageButton.inactive:hover {\n                transform: none;\n            }\n        </style>\n        <div class="table"></div>\n        <div class="page">\n            <button class="firstPageButton">Primera</button>\n            <button id="prevPageButton" class="prevPageButton">Anterior</button>\n            <button id="nextPageButton" class="nextPageButton">Siguiente</button>\n            <button class="lastPageButton">Última</button>\n        </div>\n\n        ';let n=this.shadow.querySelector(".table");n.innerHTML="",this.data.forEach((e=>{let t=document.createElement("div");t.classList.add("table-element"),n.appendChild(t);let o=document.createElement("div");o.classList.add("table-buttons"),t.appendChild(o);let i=document.createElement("div");i.classList.add("edit-button"),i.dataset.id=e.id,o.appendChild(i),i.innerHTML='<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><title>edit-content</title><path d="M20.71,7.04C21.1,6.65 21.1,6 20.71,5.63L18.37,3.29C18,2.9 17.35,2.9 16.96,3.29L15.12,5.12L18.87,8.87M3,17.25V21H6.75L17.81,9.93L14.06,6.18L3,17.25Z" /></svg>';let s=document.createElement("div");s.classList.add("delete-button"),s.dataset.id=e.id,o.appendChild(s),s.innerHTML='<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><title>delete-content</title><path d="M19,4H15.5L14.5,3H9.5L8.5,4H5V6H19M6,19A2,2 0 0,0 8,21H16A2,2 0 0,0 18,19V7H6V19Z" /></svg>';let r=document.createElement("div");r.classList.add("table-info"),t.appendChild(r);let l=document.createElement("ul");r.appendChild(l);let d={nombre:"nombre","CategoriaProducto.nombre":"Categoría","PrecioProducto.precio_base":"Precio Base","PrecioProducto.PrecioIva.tipo":"Tipo de IVA"};for(let[n,t]of Object.entries(d)){let o=a(e,n);if(o){let n=document.createElement("li");n.textContent=`${t}: ${o}`,l.appendChild(n)}}})),this.shadow.querySelectorAll(".delete-button").forEach((n=>{n.addEventListener("click",(()=>{document.dispatchEvent(new CustomEvent("open-modal",{detail:{id:n.dataset.id}}))}))})),this.shadow.querySelectorAll(".edit-button").forEach((n=>{n.addEventListener("click",(()=>{document.dispatchEvent(new CustomEvent("loadData",{detail:{id:n.dataset.id}}))}))}));let e=this.shadow.querySelector(".firstPageButton");e.addEventListener("click",(()=>this.loadFirstPage()));let t=this.shadow.querySelector("#prevPageButton");t.addEventListener("click",(()=>this.loadPrevPage()));let o=this.shadow.querySelector("#nextPageButton");o.addEventListener("click",(()=>this.loadNextPage()));let i=this.shadow.querySelector(".lastPageButton");function a(n,e){let t=e.split("."),o=n;for(let n of t)if(o=o[n],!o)break;return o}i.addEventListener("click",(()=>this.loadLastPage())),1==this.currentPage?(e.classList.add("inactive"),t.classList.add("inactive")):(e.classList.remove("inactive"),t.classList.remove("inactive")),this.currentPage==this.totalPages||0===this.totalPages?(o.classList.add("inactive"),i.classList.add("inactive")):(o.classList.remove("inactive"),i.classList.remove("inactive"))}}customElements.define("examen-component",n)}},e={};function t(o){var i=e[o];if(void 0!==i)return i.exports;var a=e[o]={exports:{}};return n[o](a,a.exports,t),a.exports}(()=>{"use strict";class n extends HTMLElement{constructor(){super(),this.shadow=this.attachShadow({mode:"open"}),this.render()}render(){this.shadow.innerHTML='\n        <style>\n            h1 {\n                color: hsl(0, 0%, 100%);\n                font-family: "Poppins", sans-serif;\n                font-size: 2.5rem;\n                font-weight: 600;\n                margin: 0;\n                text-decoration: none;\n            }\n\n            .panel-header {\n                display: flex;\n                justify-content:space-between;\n                align-items: center;\n                margin-top: 2rem;\n            }\n\n            .header-logo {\n                cursor: pointer;\n            }\n        </style>\n        <div class="header-logo">\n            <h1>Detectib</h1>\n        </div>\n        '}}customElements.define("logo-component",n);class e extends HTMLElement{constructor(){super(),this.shadow=this.attachShadow({mode:"open"}),this.render()}render(){this.shadow.innerHTML='\n        <style>\n            h1 {\n                color: hsl(0, 0%, 100%);\n                font-family: "Poppins", sans-serif;\n                font-size: 2.5rem;\n                font-weight: 600;\n                margin: 0;\n            }\n\n            .panel-header {\n                display: flex;\n                justify-content:space-between;\n                align-items: center;\n                margin-top: 2rem; \n            }\n\n            .header-title {\n                cursor: pointer;\n            }\n        </style>\n        <div class="header-title">\n            <h1>Clientes</h1>\n        </div>\n        '}}customElements.define("title-component",e);class o extends HTMLElement{constructor(){super(),this.shadow=this.attachShadow({mode:"open"}),this.render()}render(){this.shadow.innerHTML='\n        <style>\n            svg {\n                width: 2.5rem;\n                fill:hsl(0, 0%, 100%);\n            }\n\n            h1 {\n                color: hsl(0, 0%, 100%);\n                font-family: "Poppins", sans-serif;\n                font-size: 2.5rem;\n                font-weight: 600;\n                margin: 0;\n                text-decoration: none;\n            }\n\n            .panel-header {\n                display: flex;\n                justify-content:space-between;\n                align-items: center;\n                margin-top: 2rem;\n            }\n\n            .hamburger-button {\n                cursor: pointer;\n            }\n\n            .hamburger-button.active {\n                background-color: hsl(0, 0%, 100%);\n                height: 100vh;\n                position: fixed;\n                left: 0;\n                opacity: 0;\n                top: 0;\n                transition: all 0.2s ease-in-out;\n                width: 100%;\n                z-index: -1;\n            }\n        </style>\n        <div class="hamburger-button">\n            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><title>menu</title><path d="M3,6H21V8H3V6M3,11H21V13H3V11M3,16H21V18H3V16Z" /></svg>\n        </div>\n        '}}customElements.define("menu-component",o);const i="http://127.0.0.1:8080/api/admin";class a extends HTMLElement{constructor(){super(),this.shadow=this.attachShadow({mode:"open"}),this.render()}render(){this.shadow.innerHTML='\n        <style>\n            *{\n                margin: 0;\n                padding: 0;\n                box-sizing: border-box;\n                list-style: none;\n            }\n\n            .filter-section {\n                position: relative;\n                overflow: hidden;\n            }\n\n            .filter-button {\n                width: 100%;\n                display: flex;\n                justify-content: center;\n                cursor: pointer;\n                background-color: white;\n                transition: 0.5s;\n            }\n\n            .filter-button.active {\n                margin-top: 10rem;\n            }\n            \n            .filter-icon {\n                transition: 0.5s\n            }\n\n            .filter-icon svg {\n                width: 2rem;\n                fill: rgba(109,183,243,255);  \n            }\n\n            .filter-icon:hover svg {\n                transform: scale(110%);\n            }\n\n            .filter-form {\n                width: 100%;\n                position: absolute;\n                z-index: -1\n            }\n\n            .filter-form.active {\n                z-index: 0\n            }\n\n            hero {\n                color: white;\n                font-family: "Poppins", sans-serif;\n                font-size: 1.5rem;\n                font-weight: 500;\n            }\n\n            .filter-form form {\n                padding: 1rem 0;\n                display: flex;\n                justify-content: center;\n                gap: 4rem;\n            }\n\n            form label {\n                color: white;\n                font-family: "Poppins", sans-serif;\n                font-size: 25px;\n                font-weight: 500;\n            }\n\n            form input {\n                width: 100%;\n                font-size: 20px;\n                color: black;\n                padding: 0.2rem;\n                padding-left: 1rem;\n            }\n\n            input[type="text"] {\n                border: none;\n                border-bottom: 1px solid white;\n                background-color:  hsl(216, 94%, 67%);\n                box-shadow: 2px 2px 4px rgba(0, 0, 0, 0.4);\n                width: 100%;\n                height: 2.5rem;\n                outline: none;\n            }\n        </style>\n        \n        <section class="filter-section">\n            <div class="filter-form">\n                <div>\n                    <hero>Filtra los registros:</hero>\n                </div>\n                <form id="filter-form">\n                    <div class="campo">\n                        <label>Nombre</label>\n                        <input name="name" type="text"></input>\n                    </div>\n                    <div class="campo">\n                        <label>Email</label>\n                        <input name="email" type="text"></input>\n                    </div>\n                </form>\n            </div>\n            <div class="filter-button">\n                <div class="filter-icon">\n                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M14,12V19.88C14.04,20.18 13.94,20.5 13.71,20.71C13.32,21.1 12.69,21.1 12.3,20.71L10.29,18.7C10.06,18.47 9.96,18.16 10,17.87V12H9.97L4.21,4.62C3.87,4.19 3.95,3.56 4.38,3.22C4.57,3.08 4.78,3 5,3V3H19V3C19.22,3 19.43,3.08 19.62,3.22C20.05,3.56 20.13,4.19 19.79,4.62L14.03,12H14Z" /></svg>\n                </div>\n            </div>\n        </section>\n        ',this.renderFilter()}renderFilter=()=>{const n=this.shadow.querySelector(".filter-button");n.addEventListener("click",(()=>{const e=this.shadow.querySelector(".filter-form");if(n.classList.toggle("active"),e.classList.contains("active")?e.classList.remove("active"):setTimeout((()=>{e.classList.add("active")}),300),!n.classList.contains("active")){const n=this.shadow.querySelector("#filter-form"),e=Object.fromEntries(new FormData(n));console.log(e);const t=new URLSearchParams(e);if(""===t.toString()){const n=document.querySelector("table-component");n&&n.resetData()}else fetch(`${i}/users?${t}`).then((n=>{if(n.ok)return n.json();throw new Error("Error: "+n.status)})).then((n=>{console.log(n);const e=new CustomEvent("filter-results",{detail:{data:n}});document.dispatchEvent(e)})).catch((n=>{console.error(n)}))}}))}}customElements.define("filter-component",a);class s extends HTMLElement{constructor(){super(),this.shadow=this.attachShadow({mode:"open"}),this.data=[],this.currentPage=1,this.totalPages=null}static get observedAttributes(){return["url"]}async connectedCallback(){document.addEventListener("refresh-table",(async n=>{await this.loadData(),await this.render()})),document.addEventListener("filter-results",(n=>{const e=n.detail.data;this.data=e.rows,this.currentPage=e.meta.currentPage,this.totalPages=e.meta.pages,this.render()}))}async attributeChangedCallback(n,e,t){await this.loadData(),await this.render()}loadData=async()=>{try{let n=await fetch(`${i}/users?page=${this.currentPage}`),e=await n.json();this.data=e.rows,this.currentPage=e.meta.currentPage,this.totalPages=e.meta.pages}catch(n){console.log(n)}};loadFirstPage=async()=>{this.currentPage=1,await this.loadData(),await this.render()};loadPrevPage=async()=>{this.currentPage>1&&(this.currentPage=Number(this.currentPage)-1,await this.loadData(),await this.render())};loadNextPage=async()=>{this.currentPage<this.totalPages&&(this.currentPage=Number(this.currentPage)+1,await this.loadData(),await this.render())};loadLastPage=async()=>{this.currentPage=this.totalPages,console.log(this.currentPage),await this.loadData(),await this.render()};render(){this.shadow.innerHTML='\n        <style>\n            li {\n                font-family: "Poppins", sans-serif;\n                margin-bottom: 2px;\n            }\n\n            ul {\n                list-style: none;\n                padding-left: 0;\n            }\n            \n            .table{\n                display: flex;\n                flex-direction: column;\n                justify-content: space-between;\n                gap: 1.5rem;\n            }\n            \n            .table-element{\n                background-color:hsl(216, 94%, 67%);\n                box-shadow: 2px 2px 4px rgba(0, 0, 0, 0.4);\n            }\n            \n            .table-buttons{\n                display: flex;\n                justify-content: flex-end;\n                background-color: hsl(204, 85%, 69%);\n            }\n            \n            .table-buttons svg{\n                width: 2.5rem;\n                fill: white;\n                cursor: pointer;\n            }\n\n            .table-buttons svg:hover{\n                transform: scale(110%);\n            }\n            \n            .table-info{\n                padding: 0 1rem;\n            }\n            \n            .table-info ul li{\n                color: white;\n                font-size: 1rem;\n            }\n\n            .page {\n                margin-top: 1rem;\n                display: flex;\n                justify-content: space-between;\n            }\n\n            .page button {\n                color: hsl(211, 12%, 48%);\n                background-color: white;\n                padding: 5px;\n                font-size: 1rem;\n                font-weight: 500;\n                font-family: "Poppins", sans-serif;\n                border: 1px solid hsl(204, 85%, 80%);\n                box-shadow: 2px 2px 4px rgba(0, 0, 0, 0.4);\n                cursor: pointer;\n            }\n            \n            .page button:hover {\n                color: hsl(208, 13%, 25%);\n            }\n            \n            .nextPageButton.inactive,\n            .prevPageButton.inactive,\n            .firstPageButton.inactive,\n            .lastPageButton.inactive {\n                opacity: 50%;\n                cursor: default;\n                pointer-events: none;\n            }\n            \n            .nextPageButton.inactive:hover,\n            .prevPageButton.inactive:hover,\n            .firstPageButton.inactive:hover,\n            .lastPageButton.inactive:hover {\n                transform: none;\n            }\n        </style>\n        <div class="table"></div>\n        <div class="page">\n            <button class="firstPageButton">Primera</button>\n            <button id="prevPageButton" class="prevPageButton">Anterior</button>\n            <button id="nextPageButton" class="nextPageButton">Siguiente</button>\n            <button class="lastPageButton">Última</button>\n        </div>\n\n        ';let n=this.shadow.querySelector(".table");n.innerHTML="",this.data.forEach((e=>{let t=document.createElement("div");t.classList.add("table-element"),n.appendChild(t);let o=document.createElement("div");o.classList.add("table-buttons"),t.appendChild(o);let i=document.createElement("div");i.classList.add("edit-button"),i.dataset.id=e.id,o.appendChild(i),i.innerHTML='<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><title>edit-content</title><path d="M20.71,7.04C21.1,6.65 21.1,6 20.71,5.63L18.37,3.29C18,2.9 17.35,2.9 16.96,3.29L15.12,5.12L18.87,8.87M3,17.25V21H6.75L17.81,9.93L14.06,6.18L3,17.25Z" /></svg>';let a=document.createElement("div");a.classList.add("delete-button"),a.dataset.id=e.id,o.appendChild(a),a.innerHTML='<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><title>delete-content</title><path d="M19,4H15.5L14.5,3H9.5L8.5,4H5V6H19M6,19A2,2 0 0,0 8,21H16A2,2 0 0,0 18,19V7H6V19Z" /></svg>';let s=document.createElement("div");s.classList.add("table-info"),t.appendChild(s);let r=document.createElement("ul");s.appendChild(r);for(let[n,t]of Object.entries(e))if("id"!==n){let e=document.createElement("li");e.textContent=`${n}: ${t}`,r.appendChild(e)}})),this.shadow.querySelectorAll(".delete-button").forEach((n=>{n.addEventListener("click",(()=>{document.dispatchEvent(new CustomEvent("open-modal",{detail:{id:n.dataset.id}}))}))})),this.shadow.querySelectorAll(".edit-button").forEach((n=>{n.addEventListener("click",(()=>{document.dispatchEvent(new CustomEvent("loadData",{detail:{id:n.dataset.id}}))}))}));let e=this.shadow.querySelector(".firstPageButton");e.addEventListener("click",(()=>this.loadFirstPage()));let t=this.shadow.querySelector("#prevPageButton");t.addEventListener("click",(()=>this.loadPrevPage()));let o=this.shadow.querySelector("#nextPageButton");o.addEventListener("click",(()=>this.loadNextPage()));let i=this.shadow.querySelector(".lastPageButton");i.addEventListener("click",(()=>this.loadLastPage())),1==this.currentPage?(e.classList.add("inactive"),t.classList.add("inactive")):(e.classList.remove("inactive"),t.classList.remove("inactive")),this.currentPage==this.totalPages||0===this.totalPages?(o.classList.add("inactive"),i.classList.add("inactive")):(o.classList.remove("inactive"),i.classList.remove("inactive"))}}customElements.define("table-component",s);class r extends HTMLElement{constructor(){super(),this.shadow=this.attachShadow({mode:"open"}),this.render(),this.images=[]}async connectedCallback(){document.addEventListener("loadData",(async n=>{const{id:e}=n.detail;await this.loadData(e),this.fillFormFields()})),document.addEventListener("sendImageToForm",(async n=>{const{title:e,alt:t,filename:o,imageUrl:i,name:a}=n.detail;this.images.push({title:e,alt:t,filename:o,imageUrl:i,name:a})}))}async loadData(n){try{const e=await fetch(`${i}/users/${n}`,{method:"GET",headers:{"Content-Type":"application/json"}});return this.data=await e.json(),this.data}catch(n){console.log(n)}}fillFormFields(){const n=this.shadow.querySelector("#form"),{name:e,email:t}=this.data;n.name.value=e,n.email.value=t}displayErrorMessages(n){const e=this.shadow.querySelector("#errorContainer");e.innerHTML="",n.forEach((n=>{const t=document.createElement("p");t.textContent=n.message,t.classList.add("error-message"),e.appendChild(t)}))}render(){this.shadow.innerHTML='\n        <style>\n            *{\n                margin: 0;\n                padding: 0;\n                box-sizing: border-box;\n            }\n\n            button {\n                width: 100%;\n                height: 100%;\n                cursor: pointer;\n                background-color: transparent;\n                border: none;\n            }\n\n            button:hover svg {\n                transform: scale(110%);\n            }\n\n            svg {\n                width: 2.5rem;\n                cursor: pointer;\n            }\n\n            label, input {\n                font-family: "Poppins", sans-serif;\n            }\n\n            .form-section {\n                width: 100%;\n                display: flex;\n                flex-direction: column;\n                gap: 2rem;\n            }\n            \n            .form-section .form-selector {\n                width: 100%;\n                height: 5vh;\n                background-color: white;\n                display: flex;\n                justify-content: space-between;\n                align-items: center;\n                box-shadow: 2px 2px 4px rgba(0, 0, 0, 0.4);\n            }\n            \n            .form-selector .selector {\n                display: flex;\n                height: 100%;\n            }\n            \n            .selector div {\n                height: 100%;\n                width: 100%;\n                padding: 0 1rem;\n            }\n            \n            .selector div p {\n                color: hsl(208, 13%, 25%);\n                font-family: "Poppins", sans-serif;\n                margin: 0;\n                font-size: 1rem;\n                font-weight: 600;\n            }\n            \n            .selector div.active {\n                background-color: rgba(109,183,243,255);\n            }\n            \n            .selector div.active p {\n                color: white;\n            }\n            \n            .form-selector .options {\n                height: 100%;\n                display: flex;\n                gap: 1rem;\n                align-items: center;\n                margin-right: 10px;\n            }\n            \n            .options div {\n                height: 2.5rem;\n                width: 2.5rem;\n                display: flex;\n            }\n            \n            .options div button {\n                width: 100%;\n                height: 100%;\n            }\n            \n            .options div svg {\n                fill: rgba(109,183,243,255);\n            }\n            \n            .profile-form {\n                display: none;\n            }\n            \n            .profile-form.active {\n                display: grid;\n                grid-template-columns: 1fr 1fr;\n                width: 100%;\n                gap: 1rem;\n            }\n            \n            form div {\n                display: flex;\n                flex-direction: column;\n                gap: 0.5rem;\n            }\n            \n            form div label {\n                color: white;\n                font-size: 25px;\n                font-weight: 500;\n                margin-bottom: 1.5rem;\n            }\n            \n            form div input {\n                width: 100%;\n                font-size: 20px;\n                color: black;\n                border: none;\n                border-bottom: 1px solid white;\n                padding: 0.2rem;\n                padding-left: 1rem;\n            }\n\n            input[type="text"], [type="password"] {\n                border: none;\n                border-bottom: 1px solid white;\n                background-color:  hsl(216, 94%, 67%);\n                box-shadow: 2px 2px 4px rgba(0, 0, 0, 0.4);\n                width: 100%;\n                height: 2.5rem;\n                outline: none;\n            }\n            \n            .error-message {\n                font-family: "Poppins", sans-serif;\n                color: hsla(0, 100%, 59%, 1);\n                font-size: 1rem;\n                font-weight: 500;\n                margin-top: 5px;\n            }\n        </style>\n        \n        <section class="form-section">\n            <div class="form-selector">\n                <div class="selector">\n                    <div class="active" data-form="principal">\n                        <button>\n                            <p>Principal</p>\n                        </button>\n                    </div>\n                    <div data-form="image">\n                        <button>\n                            <p>Imágenes</p>\n                        </button>\n                    </div>\n                </div>\n                <div class="options">\n                    <div>\n                        <button type="button" id="resetButton">\n                            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><title>erase-content</title><path d="M19.36,2.72L20.78,4.14L15.06,9.85C16.13,11.39 16.28,13.24 15.38,14.44L9.06,8.12C10.26,7.22 12.11,7.37 13.65,8.44L19.36,2.72M5.93,17.57C3.92,15.56 2.69,13.16 2.35,10.92L7.23,8.83L14.67,16.27L12.58,21.15C10.34,20.81 7.94,19.58 5.93,17.57Z" /></svg>                        </button>\n                    </div>\n                    <div>\n                        <button type="submit" id="submitButton">\n                        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><title>save-content</title><path d="M15,9H5V5H15M12,19A3,3 0 0,1 9,16A3,3 0 0,1 12,13A3,3 0 0,1 15,16A3,3 0 0,1 12,19M17,3H5C3.89,3 3,3.9 3,5V19A2,2 0 0,0 5,21H19A2,2 0 0,0 21,19V7L17,3Z" /></svg>                        </button>\n                    </div>\n                </div>\n            </div>\n            <div class="form-container">\n                <form id="form">\n                    <div class="profile-form active" data-form="principal" id="form-principal">\n                        <div>\n                            <label>Nombre</label>\n                            <input name="name" type="text"></input>\n                        </div>\n                        <div>\n                            <label>Email</label>\n                            <input name="email" type="text"></input>\n                        </div>\n                        <div>\n                            <label>Contraseña</label>\n                            <input name="password" type="password"></input>\n                        </div>\n                        <div>\n                            <label>Confirme contraseña</label>\n                            <input name="passwordConfirmed" type="password"></input>\n                        </div>\n                    </div>\n                    <div class="profile-form" data-form="image">\n                        <div class="input-image">\n                            <label>Imagen de avatar</label>\n                            <image-component name="avatar"></image-component>\n                        </div>\n                    </div>\n                </form>\n            </div>\n        </section>\n        ';const n=this.shadow.querySelector(".form-container").querySelectorAll(".profile-form"),e=this.shadow.querySelector("#form"),t=this.shadow.querySelector("#resetButton"),o=this.shadow.querySelector("#submitButton"),a=this.shadow.querySelector(".selector").querySelectorAll("div"),s=document.createElement("div");s.id="errorContainer",e.appendChild(s),t.addEventListener("click",(()=>{e.reset()})),a.forEach((e=>{const t=e.dataset.form,o=new CustomEvent("show-form",{detail:t});e.addEventListener("click",(()=>{document.dispatchEvent(o);for(let n=0;n<a.length;n++)a[n].classList.remove("active");e.classList.add("active"),n.forEach((n=>{n.dataset.form==t?n.classList.add("active"):n.classList.remove("active")}))}))})),o.addEventListener("click",(async()=>{const n=Object.fromEntries(new FormData(e));this.images.length>0&&(n.images=this.images);const t=this.data?"PUT":"POST",o=this.data?`${i}/users/${this.data.id}`:`${i}/users`;delete n.id,fetch(o,{method:t,headers:{"Content-Type":"application/json",Authorization:`Bearer ${sessionStorage.getItem("accessToken")}`},body:JSON.stringify(n)}).then((async n=>{if(500==n.status)throw n;return n.json()})).then((n=>{document.dispatchEvent(new CustomEvent("refresh-table")),this.loadData()})).catch((async n=>{if(500==n.status){const e=await n.json();this.displayErrorMessages(e.message)}})),e.reset(),this.data=null}))}}customElements.define("form-component",r);class l extends HTMLElement{constructor(){super(),this.shadow=this.attachShadow({mode:"open"}),this.render()}connectedCallback(){document.addEventListener("open-modal",(n=>{this.shadow.querySelector(".modal").classList.toggle("active"),this.id=n.detail.id}))}render(){this.shadow.innerHTML='\n        <style>\n            .modal{\n                background-color: hsla(0, 0%, 100%, 0.541);\n                height: 100vh;\n                position: fixed;\n                left: 0;\n                opacity: 0;\n                top: 0;\n                transition: all 0.2s ease-in-out;\n                width: 100%;\n                z-index: -1;\n            }\n            \n            .modal.active{\n                opacity: 1;\n                z-index: 2000;\n            }\n            \n            .message-box{\n                position: absolute;\n                height: 15vh;\n                width: 25%;\n                top: 30%;\n                left: 50%;\n                transform: translate(-50%, -50%);\n                box-shadow: 0 0 62px hsla(0, 0%, 0%, 0.3);\n                align-items: center;\n                background-color: hsl(0, 0%, 100%);\n                border: 2px solid hsl(216, 94%, 67%);\n            }\n            \n            .message-box h5{\n                position: relative;\n                text-align: center;\n                margin-top: 2rem;\n                font-size: 1rem;\n                font-family: "Poppins", sans-serif;\n                font-weight: 500;\n                \n            }\n            \n            .buttons {\n                display: flex;\n                justify-content: center;\n                gap: 2rem;\n                margin-top: 2rem;\n            }\n            \n            .buttons button {\n                padding: 0.5rem 2rem;\n                border: none;\n                border-radius: 5px;\n                cursor: pointer;\n                font-size: 1rem;\n                font-family: "Poppins", sans-serif;\n            }\n            \n            .buttons button.yes {\n                background-color: hsl(134, 61%, 41%);\n                color: hsl(0, 0%, 100%);\n            }\n            \n            .buttons button.no {\n                background-color: hsl(354, 70%, 54%);\n                color: hsl(0, 0%, 100%);\n            }\n            \n            .close-button {\n                position: absolute;\n                top: 10px;\n                right: 10px;\n                cursor: pointer;\n            }\n            \n            .close-button svg {\n                fill: hsl(0, 0%, 40%);\n                width: 1.5rem;\n                height: 1.5rem;\n            }\n            \n            .close-button:hover svg {\n                fill: hsl(0, 0%, 0%);\n            } \n        </style>\n        <div class="modal">\n            <div class="message-box">\n                <h5>¿Seguro que quieres eliminar los datos?</h5>\n                <div class="buttons">\n                    <button type="button" class="yes">Sí</button>\n                    <button type="button" class="no modal-button">No</button>\n                </div>\n                <div class="close-button modal-button">\n                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><title>window-close</title><path d="M13.46,12L19,17.54V19H17.54L12,13.46L6.46,19H5V17.54L10.54,12L5,6.46V5H6.46L12,10.54L17.54,5H19V6.46L13.46,12Z" /></svg>\n                </div>\n            </div>\n        </div>\n        ';const n=this.shadow.querySelector(".modal"),e=this.shadow.querySelectorAll(".modal-button");this.shadow.querySelector(".yes").addEventListener("click",(async()=>{try{await fetch(`${i}/users/${this.id}`,{method:"DELETE"}),n.classList.toggle("active"),document.dispatchEvent(new CustomEvent("refresh-table"))}catch(n){console.log(`Error al eliminar el registro con ID ${id}.`,n)}})),e.forEach((e=>{e.addEventListener("click",(()=>{n.classList.toggle("active")}))}))}}customElements.define("modal-component",l);class d extends HTMLElement{constructor(){super(),this.shadow=this.attachShadow({mode:"open"}),this.render()}showError=n=>{const e=n.message,t=this.shadow.querySelector(".message-container");t.querySelector(".error-container")&&t.querySelector(".error-container").remove();const o=document.createElement("div"),i=document.createElement("p");i.innerHTML=e,o.appendChild(i),t.appendChild(o),o.classList.add("error-container")};redirectPanel=n=>{const e=`¡Bienvenido ${n.name}!`,t=this.shadow.querySelector(".message-container");t.querySelector(".error-container")&&t.querySelector(".error-container").remove();const o=document.createElement("div"),i=document.createElement("p");i.innerHTML=e,o.appendChild(i),t.appendChild(o),o.classList.add("success-container"),setTimeout((()=>{window.location.href="http://127.0.0.1:5500/client/admin/index.html"}),500)};render(){this.shadow.innerHTML='\n        <style>\n            .login-container {\n                display: flex;\n                justify-content: center;\n                align-items: center;\n                height: 100%;\n                width: 100%;\n                margin-top: 5rem;\n            }\n            \n            .login-box {\n                width: 20%;\n                height: 50%;\n                padding: 2rem;\n                background-color: hsla(206, 100%, 50%, 1);\n                border-radius: 10px;\n                box-shadow: 0 0 5px hsl(0, 0%, 100%);\n                color: hsl(0, 0%, 100%);\n            }\n            \n            h2 {\n                font-family: \'Poppins\', sans-serif;\n                text-align: center;\n                margin-bottom: 2.5rem;\n                font-size: 2.5rem;\n                font-weight: 600;\n                text-shadow: 0 0 5px hsl(0,0%,79.2%); \n            }\n            \n            .form-group {\n                width: 100%;\n                margin-bottom: 1rem;\n            }\n            \n            label {\n                display: block;\n                font-weight: 300;\n            }\n            \n            input[type="text"],\n            input[type="password"] {\n                display: flex;\n                flex-direction: column;\n                width: 88%;\n                padding: 15px;\n                border-radius: 1em;\n                border: 2px solid hsl(0,0%,32.5%);\n            }\n            \n            button {\n                display: block;\n                width: 100%;\n                min-height: 50px;\n                margin-top: 40px;\n                background-color: hsla(206, 100%, 30%, 1);\n                color: hsl(0, 0%, 100%);\n                font-family: \'Poppins\', sans-serif;\n                font-weight: 500;\n                border: none;\n                border-radius: 1em;\n                cursor: pointer;\n                box-shadow: 0 0 5px hsl(0, 0%, 100%); \n            }\n            \n            button:hover {\n                color: rgb(223, 223, 223);\n                box-shadow: 0 0 5px hsl(0, 0%, 100%); \n            }\n\n            .message-container {\n                position: absolute;\n                top: 0;\n                left: 0;\n                width: 100%;\n                z-index: 100;\n            }\n\n            .error-container {\n                background-color: white;\n                border-left: 5px solid hsl(0, 70%, 60%);\n                padding: 1rem 0.5rem;\n                margin-top: 2rem;\n                border-radius: 5px;\n                box-shadow: 0 2px 4px hsl(0, 0%, 20%);\n            }\n              \n            .error-container p {\n                color: hsl(0, 70%, 60%);\n                font-weight: 600;\n                font-family: \'Poppins\', sans-serif;\n                margin: 0;\n            }\n              \n            .success-container {\n                background-color: white;\n                border-left: 5px solid hsl(120, 70%, 60%);\n                padding: 1rem 0.5rem;\n                margin-top: 2rem;\n                border-radius: 5px;\n                box-shadow: 0 2px 4px hsl(0, 0%, 20%);\n            }\n              \n            .success-container p {\n                color: hsl(120, 70%, 60%);\n                font-weight: 600;\n                font-family: \'Poppins\', sans-serif;\n                margin: 0;\n            }\n        </style>\n            <div class="login-container">\n                <div class="login-box">\n                    <h2>Login</h2>\n                    <div class="message-container"></div>\n                    <form id="loginForm">\n                        <div class="form-group">\n                            <input type="text" id="email" name="email" placeholder="EMAIL">\n                        </div>\n                        <div class="form-group">\n                            <input type="password" id="password" name="password" placeholder="PASSWORD">\n                        </div>\n                        <button type="submit" id="submitButton">Submit</button>\n                    </form>\n                </div>\n            </div>\n        ';const n=this.shadow.querySelector("#submitButton"),e=this.shadow.querySelector("#loginForm");n.addEventListener("click",(async n=>{n.preventDefault();const t=new FormData(e);fetch("http://localhost:8080/api/auth/users/signin",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(Object.fromEntries(t))}).then((n=>{if(!n.ok)throw new Error("Invalid email or password");return n.json()})).then((n=>{sessionStorage.setItem("accessToken",n.accessToken),this.redirectPanel(n)})).catch((n=>{this.showError(n)})),e.reset()}))}}customElements.define("login-component",d),t(874);class c extends HTMLElement{constructor(){super(),this.shadow=this.attachShadow({mode:"open"}),this.render(),this.imageSelectionListener()}imageSelectionListener(){document.addEventListener("imageSelected",(n=>{this.getAttribute("name")==n.detail.name&&this.imageSelected(n.detail.imageUrl)})),this.shadow.addEventListener("click",(n=>{if(n.target.closest("button")){const n=this.getAttribute("name"),e=new CustomEvent("imageSelected",{detail:{name:n}});document.dispatchEvent(e)}}))}render(){this.shadow.innerHTML='\n            <style>\n                .image-section {\n                    display: flex;\n                    align-items: center;\n                    justify-content: flex-start;\n                    max-width: 100%;\n                }\n\n                .upload-button {\n                    width: 5rem;\n                    height: 5rem;\n                    left: 0;\n                    cursor: pointer;\n                    opacity: 1;\n                    background-color: hsl(231, 93%, 58%);\n                    border: 2px solid white;\n                    display: flex;\n                    justify-content: center;\n                    align-items: center;\n                    font-size: 20px;\n                    margin-right: 2rem;\n                }\n                \n                .plus-symbol {\n                    color: white;\n                    font-weight: bold;\n                    font-size: 2rem;\n                    font-weight: 300;\n                    line-height: 4rem;\n                }\n\n                img.image {\n                    max-width: 100%;\n                    max-height: 100%;\n                }\n            </style>\n            \n            <div class="image-section">\n                <button class="upload-button">\n                    <span class="plus-symbol">+</span>\n                </button>\n                <img class="image" src="" alt="" />\n            </div>\n            \n        ',this.renderImage()}renderImage=()=>{const n=this.shadow.querySelector(".image-section .upload-button");n.setAttribute("data-name",this.getAttribute("name")),n.addEventListener("click",(()=>{document.dispatchEvent(new CustomEvent("openImageModal"))}))};imageSelected(n){const e=this.shadow.querySelector(".image");e.setAttribute("src",n),e.style.border="2px solid white"}}customElements.define("image-component",c);class h extends HTMLElement{constructor(){super(),this.name=null,this.shadow=this.attachShadow({mode:"open"}),this.render()}connectedCallback(){document.addEventListener("openImageModal",(()=>{this.shadow.querySelector(".modal").classList.toggle("active")})),document.addEventListener("imageSelected",(n=>{this.name=n.detail.name}))}render(){this.shadow.innerHTML='\n        <style>\n            .modal{\n                background-color: hsla(0, 0%, 100%, 0.541);\n                height: 100vh;\n                position: fixed;\n                left: 0;\n                opacity: 0;\n                top: 0;\n                transition: all 0.2s ease-in-out;\n                width: 100%;\n                z-index: -1;\n            }\n            \n            .modal.active{\n                opacity: 1;\n                z-index: 2000;\n            }\n            \n            .image-box{\n                position: absolute;\n                height: 80%;\n                width: 80%;\n                top: 50%;\n                left: 50%;\n                transform: translate(-50%, -50%);\n                box-shadow: 0 0 62px hsla(0, 0%, 0%, 0.3);\n                align-items: center;\n                background-color: hsl(0, 0%, 100%);\n                border: 2px solid hsl(216, 94%, 67%);\n            }\n\n            .close-button {\n                position: absolute;\n                top: 10px;\n                right: 10px;\n                cursor: pointer;\n            }\n            \n            .close-button svg {\n                fill: hsl(0, 0%, 40%);\n                width: 1.5rem;\n                height: 1.5rem;\n            }\n            \n            .close-button:hover svg {\n                fill: hsl(0, 0%, 0%);\n            }\n\n            * {\n                font-family: "Poppins", sans-serif; \n            }\n\n            h3, p {\n                font-weight: 500;\n                margin: 0;\n            }\n\n            html {\n                line-height: 1.15;\n                -webkit-text-size-adjust: 100%;\n            }\n\n            .tabs {\n                margin: 6rem;\n                display: flex;\n                flex-direction: column;\n            }\n         \n            .tab-header {\n                display: flex;\n                justify-content: flex-start;\n                align-items: center;\n            } \n         \n            .tab {\n                color: hsl(0, 0%, 100%);\n                background-color: white;\n                border: 1px solid hsl(216, 94%, 67%);\n                position: relative;\n                padding: 0.5rem 1rem;\n                cursor: pointer;\n            }\n         \n            .tab:hover {\n                background-color: hsla(32, 97%, 61%, 0.822);\n            }\n         \n            .tab h3 {\n                color: black;\n                display: inline-block;\n                padding: 0.5rem;\n                cursor: pointer;\n                z-index: 2;\n            }\n         \n            .tab.active {\n                background-color: hsl(231, 93%, 58%);\n            }\n         \n            .tab:not(.active) {\n                background-color: hsl(216, 94%, 67%);\n            }\n         \n            .tab-content .active{\n                display: flex;\n                background-color: hsl(231, 93%, 58%);\n                border: 1px solid hsl(216, 94%, 67%);\n                height: 50vh;\n                padding: 1rem;\n                text-align: start;\n                width: 100%;\n            }\n         \n            .tab-content .content {\n                overflow: hidden;\n            }\n         \n            .tab-content .content:not(.active) {\n                display: none;\n            }\n         \n            .content p{\n                color: hsl(0, 0%, 100%);\n                font-weight: 400;\n                font-size: 1rem;\n            }\n\n            .image-form {\n                display: flex;\n                flex-direction: column;\n                align-items: center; \n                gap: 2rem;\n                width: 100%;\n                height: 100%; \n                margin-top: 12.5rem;\n            }\n\n            .image-form .custom-file-upload {\n                padding: 0.5rem 0;\n                background-color: hsl(206.87deg 84.81% 69.02%);\n                border: none;\n                font-size: 1rem;\n                color: white;\n                text-align: center\n                font-weight: 500;\n                cursor: pointer;\n                max-width: 60%; \n                margin: 0; \n                padding: 0.5rem 1rem;\n            }\n\n            .file-input {\n                display: none;\n            }\n\n            .gallery {\n                width: 73%;\n                height: 46.5vh;\n                display: grid;\n                grid-template-columns: repeat(auto-fill, minmax(135px, 1fr));\n                grid-template-rows: repeat(auto-fill, minmax(135px, 1fr));\n                gap: 0.5rem;\n                padding: 1rem;\n                overflow-y: scroll;\n                overflow-x: hidden;\n            }\n              \n            .image-container {\n                display: block;\n                cursor: pointer;\n                border: 4px solid transparent;\n                overflow: hidden;\n                line-height: 0;\n                align-self: flex-start;\n            }\n\n            .column {\n                background-color: hsl(206.87deg 84.81% 69.02%);\n                width: 20%;\n                height: 50vh;\n                position: absolute;\n                right: 5rem;\n                display: flex;\n                flex-direction: column;\n                align-items: center;\n                justify-content: center;\n            }\n            \n            .column label {\n                margin-bottom: 0.5rem;\n                font-size: 1rem;\n                font-weight: 500;\n                color: white;\n            }\n            \n            .column input {\n                font-size: 1rem;\n                margin-bottom: 1rem;\n            }\n\n            .column input[type="text"] {\n                text-align: center;\n                font-size: 1rem;\n                border: none;\n                background-color: white;\n            }\n            \n            .column input[type="text"]:focus {\n                outline: none;\n            }\n\n            .select {\n                position: inherit;\n                margin: 1rem;\n                bottom: 0.5rem;\n                right: 2rem;\n                width: 10rem;\n                box-shadow: rgba(0, 0, 0, 0.35) 0px 5px 15px;\n            }\n\n            .image-select {\n                padding: 0.5rem 0;\n                background-color: hsl(206.87deg 84.81% 69.02%);\n                border: none;\n                font-size: 1rem;\n                color: white;\n                font-weight: 500;\n                width: 100%;\n                cursor: pointer;\n            }\n\n            .image-container img{\n                border: 2px solid lightblue;\n            }\n              \n            .image-container img.selected {\n                border: 3px solid lightgreen;\n            }\n        </style>\n        <div class="modal">\n            <div class="image-box">\n                <div class="tabs">\n                    <div class="tab-header">\n                        <div class="tab active">\n                            <h3>Imágenes</h3>\n                        </div>\n                        <div class="tab">\n                            <h3>Galería</h3>\n                        </div>\n                    </div>\n                    <div class="tab-content">\n                        <div class="content active">\n                            <form class="image-form" id="image-form" enctype="multipart/form-data">\n                                <label class="custom-file-upload">\n                                    Subir archivo\n                                    <input type="file"  class="file-input" multiple="false" name="image"/>\n                                </label>\n                            </form>\n                        </div>\n                        <div class="content">\n                            <div class="gallery"></div>\n                            <div class="column">\n                                <label>Titulo</label>\n                                <input type="text" name="title">\n                                <label>Texto Alternativo</label>\n                                <input type="text" name="alt">\n                                <div class="select">\n                                    <button class="image-select">Elegir Imagen</button>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n                <div class="close-button modal-button">\n                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><title>window-close</title><path d="M13.46,12L19,17.54V19H17.54L12,13.46L6.46,19H5V17.54L10.54,12L5,6.46V5H6.46L12,10.54L17.54,5H19V6.46L13.46,12Z" /></svg>\n                </div>\n            </div>\n        </div>\n        ',this.renderModalButtons(),this.toggleTab(),this.uploadImage(),this.sendImageToForm()}uploadImage(){this.shadow.querySelector(".file-input").addEventListener("change",(n=>{n.preventDefault();const e=n.target.files[0],t=new FormData;t.append("file",e),fetch(`${i}/images`,{method:"POST",body:t}).then((n=>n.json())).then((n=>{const e=this.shadow.querySelector(".gallery");n.files.forEach((n=>{const t=document.createElement("div");t.classList.add("image-container");const o=document.createElement("img");o.src=`${i}/images/`+n,o.addEventListener("click",(()=>{this.toggleImageSelection(o)})),o.classList.add("selected"),t.appendChild(o),e.prepend(t)})),this.toggleTab();const t=this.shadow.querySelectorAll(".tab"),o=this.shadow.querySelectorAll(".content");t.forEach((n=>{n.classList.toggle("active")})),o.forEach((n=>{n.classList.toggle("active")}))})).catch((n=>{console.error(n)}))}))}toggleTab(){const n=this.shadow.querySelectorAll(".tab"),e=this.shadow.querySelectorAll(".content");n.forEach(((t,o)=>{t.addEventListener("click",(()=>{n.forEach((n=>n.classList.remove("active"))),e.forEach((n=>n.classList.remove("active"))),n[o].classList.add("active"),e[o].classList.add("active")}))}))}renderModalButtons(){const n=this.shadow.querySelectorAll(".modal-button"),e=this.shadow.querySelector(".modal");n.forEach((n=>{n.addEventListener("click",(()=>{e.classList.toggle("active")}))}))}sendImageToForm(){this.shadow.querySelector(".image-select").addEventListener("click",(()=>{this.shadow.querySelector(".modal").classList.toggle("active");const n=this.shadow.querySelector('input[name="title"]'),e=this.shadow.querySelector('input[name="alt"]'),t=this.shadow.querySelector(".selected");document.dispatchEvent(new CustomEvent("imageSelected",{detail:{imageUrl:t.src,name:this.name}})),document.dispatchEvent(new CustomEvent("sendImageToForm",{detail:{title:n.value,alt:e.value,filename:t.src.split("/").pop(),imageUrl:t.src,name:this.name}}))}))}toggleImageSelection(n){n.classList.toggle("selected")}}customElements.define("image-modal-component",h);class m extends HTMLElement{constructor(){super(),this.shadow=this.attachShadow({mode:"open"}),this.render()}returnToLogin=()=>{window.location.href="http://127.0.0.1:5500/client/admin/login.html"};render(){this.shadow.innerHTML='\n        <style>\n            .return-button-container {\n                width: 3rem;\n                position: absolute;\n                bottom: 0;\n                right: 0;\n                margin: 2rem 4rem\n            }\n\n            .return-button-container button {\n                width: 100%;\n                background-color: transparent;\n                cursor: pointer;\n                border: none;\n                padding: 0;\n                transition: background-color 0.3s;\n                outline: none;\n            }\n            \n            .return-button-container button:active {\n                transform: scale(0.9);\n            }\n\n            .return-button-container button:focus {\n                outline: none;\n                box-shadow: 0 0 0 3px hsl(231, 93%, 58%);\n            }\n            \n            .return-button-container button svg {\n                fill: hsl(0, 0%, 100%);\n            }\n        </style>\n        \n        <div class="return-button-container">\n            <button id="return-button">\n                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M19,3H5C3.89,3 3,3.89 3,5V9H5V5H19V19H5V15H3V19A2,2 0 0,0 5,21H19A2,2 0 0,0 21,19V5C21,3.89 20.1,3 19,3M10.08,15.58L11.5,17L16.5,12L11.5,7L10.08,8.41L12.67,11H3V13H12.67L10.08,15.58Z" /></svg>\n            </button>\n        </div> \n        \n        ',this.shadow.querySelector("#return-button").addEventListener("click",(()=>{this.returnToLogin()}))}}customElements.define("return-component",m)})()})();